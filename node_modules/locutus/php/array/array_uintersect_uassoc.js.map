{"version":3,"sources":["../../../src/php/array/array_uintersect_uassoc.js"],"names":["module","exports","array_uintersect_uassoc","arr1","retArr","arglm1","arguments","length","arglm2","cb","cb0","k1","i","k","arr","$global","window","global","Object","prototype","toString","call","arr1keys","arrs"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,uBAAT,CAAkCC,IAAlC,EAAwC;AAAE;AACzD;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,EAAf;AACA,MAAMC,SAASC,UAAUC,MAAV,GAAmB,CAAlC;AACA,MAAMC,SAASH,SAAS,CAAxB;AACA,MAAII,KAAKH,UAAUD,MAAV,CAAT;AACA,MAAIK,MAAMJ,UAAUE,MAAV,CAAV;AACA,MAAIG,KAAK,EAAT;AACA,MAAIC,IAAI,CAAR;AACA,MAAIC,IAAI,EAAR;AACA,MAAIC,MAAM,EAAV;;AAEA,MAAMC,UAAW,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyCC,MAA1D;;AAEAR,OAAM,OAAOA,EAAP,KAAc,QAAf,GACDM,QAAQN,EAAR,CADC,GAEAS,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BZ,EAA/B,MAAuC,gBAAxC,GACIM,QAAQN,GAAG,CAAH,CAAR,EAAeA,GAAG,CAAH,CAAf,CADJ,GAEIA,EAJR;;AAMAC,QAAO,OAAOA,GAAP,KAAe,QAAhB,GACFK,QAAQL,GAAR,CADE,GAEDQ,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BX,GAA/B,MAAwC,gBAAzC,GACIK,QAAQL,IAAI,CAAJ,CAAR,EAAgBA,IAAI,CAAJ,CAAhB,CADJ,GAEIA,GAJR;;AAMAY,YAAU,KAAKX,EAAL,IAAWR,IAAX,EAAiB;AAAE;AAC3BoB,UAAM,KAAKX,IAAI,CAAT,EAAYA,IAAIJ,MAAhB,EAAwBI,GAAxB,EAA6B;AAAE;AACnCE,YAAMR,UAAUM,CAAV,CAAN;AACA,WAAKC,CAAL,IAAUC,GAAV,EAAe;AACb,YAAIJ,IAAII,IAAID,CAAJ,CAAJ,EAAYV,KAAKQ,EAAL,CAAZ,MAA0B,CAA1B,IAA+BF,GAAGI,CAAH,EAAMF,EAAN,MAAc,CAAjD,EAAoD;AAClD,cAAIC,MAAMN,UAAUC,MAAV,GAAmB,CAA7B,EAAgC;AAC9BH,mBAAOO,EAAP,IAAaR,KAAKQ,EAAL,CAAb;AACD;AACD;AACA;AACA,mBAASY,IAAT,CANkD,CAMpC;AACf;AACF;AACD;AACA,eAASD,QAAT,CAbiC,CAaf;AACnB;AACF;;AAED,SAAOlB,MAAP;AACD,CAnDD","file":"array_uintersect_uassoc.js","sourcesContent":["module.exports = function array_uintersect_uassoc (arr1) { // eslint-disable-line camelcase\n  //  discuss at: https://locutus.io/php/array_uintersect_uassoc/\n  // original by: Brett Zamir (https://brett-zamir.me)\n  //   example 1: var $array1 = {a: 'green', b: 'brown', c: 'blue', 0: 'red'}\n  //   example 1: var $array2 = {a: 'GREEN', B: 'brown', 0: 'yellow', 1: 'red'}\n  //   example 1: array_uintersect_uassoc($array1, $array2, function (f_string1, f_string2){var string1 = (f_string1+'').toLowerCase(); var string2 = (f_string2+'').toLowerCase(); if (string1 > string2) return 1; if (string1 === string2) return 0; return -1;}, function (f_string1, f_string2){var string1 = (f_string1+'').toLowerCase(); var string2 = (f_string2+'').toLowerCase(); if (string1 > string2) return 1; if (string1 === string2) return 0; return -1;})\n  //   returns 1: {a: 'green', b: 'brown'}\n\n  const retArr = {}\n  const arglm1 = arguments.length - 1\n  const arglm2 = arglm1 - 1\n  let cb = arguments[arglm1]\n  let cb0 = arguments[arglm2]\n  let k1 = ''\n  let i = 1\n  let k = ''\n  let arr = {}\n\n  const $global = (typeof window !== 'undefined' ? window : global)\n\n  cb = (typeof cb === 'string')\n    ? $global[cb]\n    : (Object.prototype.toString.call(cb) === '[object Array]')\n        ? $global[cb[0]][cb[1]]\n        : cb\n\n  cb0 = (typeof cb0 === 'string')\n    ? $global[cb0]\n    : (Object.prototype.toString.call(cb0) === '[object Array]')\n        ? $global[cb0[0]][cb0[1]]\n        : cb0\n\n  arr1keys: for (k1 in arr1) { // eslint-disable-line no-labels\n    arrs: for (i = 1; i < arglm2; i++) { // eslint-disable-line no-labels\n      arr = arguments[i]\n      for (k in arr) {\n        if (cb0(arr[k], arr1[k1]) === 0 && cb(k, k1) === 0) {\n          if (i === arguments.length - 3) {\n            retArr[k1] = arr1[k1]\n          }\n          // If the innermost loop always leads at least once to an equal value,\n          // continue the loop until done\n          continue arrs // eslint-disable-line no-labels\n        }\n      }\n      // If it reaches here, it wasn't found in at least one array, so try next value\n      continue arr1keys // eslint-disable-line no-labels\n    }\n  }\n\n  return retArr\n}\n"]}